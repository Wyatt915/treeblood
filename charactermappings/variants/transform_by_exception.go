package golatex
	
type transformRule struct {
	begin     rune
	end       rune
	delta     rune
	exception map[rune]rune
}

var Data = map[string][]main.transformRule{"bold":[]main.transformRule{main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}}, "bold-fraktur":[]main.transformRule{main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}}, "bold-italic":[]main.transformRule{main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}}, "bold-sans-serif":[]main.transformRule{main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}}, "bold-script":[]main.transformRule{main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}}, "double-struck":[]main.transformRule{main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}}, "fraktur":[]main.transformRule{main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}}, "initial":[]main.transformRule{main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}}, "italic":[]main.transformRule{main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}}, "looped":[]main.transformRule{main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}}, "monospace":[]main.transformRule{main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}}, "sans-serif":[]main.transformRule{main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}}, "sans-serif-bold-italic":[]main.transformRule{main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}}, "sans-serif-italic":[]main.transformRule{main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}}, "script":[]main.transformRule{main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}}, "stretched":[]main.transformRule{main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}}, "tailed":[]main.transformRule{main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}, main.transformRule{begin:0, end:0, delta:0, exception:map[int32]int32(nil)}}}
