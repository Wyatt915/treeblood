#!/usr/bin/env python3
"""Process the data generated by extract.js"""

import json
import unicodedata

variants = {}
with open("./variants.json", "r") as fp:
    variants = json.load(fp)

codepoints = sorted([ord(key[0]) for key in variants])

low = codepoints[0]
r = (low, low)
ch_ranges = []
for i in range(len(codepoints) - 1):
    cur, next = codepoints[i], codepoints[i + 1]
    # Since lowercase sigma has two forms, there is a reserved spot for the nonexistant "other" form of capital sigma
    # (U+03A2 is listed as "reserved" in https://www.unicode.org/charts/PDF/Unicode-5.1/U51-0370.pdf)
    if next - cur > 1 and cur != 0x03A1:
        r = (low, cur)
        ch_ranges.append(r)
        r = (next, next)
        low = next

ch_ranges.append(r)

# for cr in ch_ranges:
#     print(f"{chr(cr[0])}-{chr(cr[1])}", unicodedata.name(chr(cr[0])), '-', unicodedata.name(chr(cr[1])))

temp = set()

for _, v in variants.items():
    for name in v:
        temp.add(name)

variant_names = list(temp)
print(variant_names)

result = {v: list() for v in variant_names}
orphans = {v: dict() for v in variant_names}

for cr in ch_ranges:
    if cr[1] == cr[0]:
        c = chr(cr[0])
        for name in variant_names:
            try:
                orphans[name][c] = variants[c][name]["char"]
            except KeyError:
                orphans[name][c] = c
        continue
    for name in variant_names:
        chars = [chr(x) for x in range(cr[0], cr[1] + 1)]
        rules = {
            "begin": chars[0],
            "end": chars[-1],
            "exceptions": dict(),
        }
        deltas = {}
        nulls = []
        for c in chars:
            if c == "\u03a2":
                continue
            if name in variants[c]:
                deltas[c] = int(variants[c][name]["delta"], 16)
            else:
                nulls.append(c)
        if len(deltas) == 0:
            continue
        for c in nulls:
            deltas[c] = 0
        mode = max(set(deltas.values()), key=list(deltas.values()).count)
        modecount = list(deltas.values()).count(mode)
        if modecount > 1:
            rules["delta"] = mode
            # if len(nulls) > 0:
            #    rules["invalid"] = nulls
            for c, d in deltas.items():
                if d != mode:
                    rules["exceptions"][c] = chr(ord(c[0]) + d)
        else:
            for c, d in deltas.items():
                rules["exceptions"][c] = chr(ord(c[0]) + d)

        result[name].append(rules)

with open("transform_by_exception.json", "w") as fp:
    json.dump(result, fp)


with open("orphans.json", "w") as fp:
    json.dump(orphans, fp)
